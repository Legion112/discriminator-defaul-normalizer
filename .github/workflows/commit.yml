name: Test commit
on: [push]
jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_GITHUB }}
      - uses: actions/checkout@v2
      -
        id: md5
        run: (printf %s "composer-lock-hash=" >> $GITHUB_OUTPUT && md5sum composer.lock | awk '{ print $1 }' >> $GITHUB_OUTPUT)
      - name: Sanitize repo slug
        uses: actions/github-script@v6
        id: repo_slug
        with:
          result-encoding: string
          script: return 'ghcr.io/${{ github.repository }}'.toLowerCase()
      - name: Pre load cache image
        run: (docker pull ${{ steps.repo_slug.outputs.result}}/ci/dependency:${{steps.md5.outputs.composer-lock-hash}})
      - name: Build dependency Image
        uses: docker/build-push-action@v3
        with:
          target: composerdependency
          build-args: |
            COMPOSER_LOCK_HASH=${{steps.md5.outputs.composer-lock-hash}}
          cache-from: ${{ steps.repo_slug.outputs.result}}/ci/dependency:${{steps.md5.outputs.composer-lock-hash}}
          cache-to: ${{ steps.repo_slug.outputs.result}}/ci/dependency:${{steps.md5.outputs.composer-lock-hash}}
          push: true
          pull: true
          file: .docker/Dockerfile.ci
          tags: ${{ steps.repo_slug.outputs.result}}/ci/dependency:${{steps.md5.outputs.composer-lock-hash}}
      -
        name: Build and push CI Image
        uses: docker/build-push-action@v3
        with:
          build-args: |
            COMPOSER_LOCK_HASH=${{steps.md5.outputs.composer-lock-hash}}
          cache-from: ${{ steps.repo_slug.outputs.result}}/ci/dependency:${{steps.md5.outputs.composer-lock-hash}}
          push: true
          file: .docker/Dockerfile.ci
          tags: ${{ steps.repo_slug.outputs.result}}/ci:${{github.sha}}
  run-phpunit:
    needs: build-image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /app
    container:
      image: ghcr.io/legion112/discriminator-default-normalizer/ci:${{github.sha}}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_REGISTRY_GITHUB }}
      env:
        XDEBUG_MODE: coverage
    steps:
      - name: RUN phpunit
        run: (vendor/bin/phpunit --coverage-php .output/coverage.cov)
      - uses: actions/upload-artifact@v3
        with:
          name: phpunit-coverage-report
          path: .output/coverage.cov

  git-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: (git status)
      - run: (ls -al)
      - run: (pwd)
      - run: (git diff HEAD^1 > .output/patch.txt)
      - uses: actions/upload-artifact@v3
        with:
          name: git-diff
          path: .output/patch.txt

  run-coverage-check:
    needs:
      - run-phpunit
      - git-diff
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /app
    container:
      image: fearofcode/phpcov:8
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_REGISTRY_GITHUB }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: phpunit-coverage-report
      - run: (patch-coverage --path-prefix /app .output/coverage.cov .output/patch.txt)

  run-psalm:
    needs: build-image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /app
    container:
      image: ghcr.io/legion112/discriminator-default-normalizer/ci:${{github.sha}}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_REGISTRY_GITHUB }}
      env:
        XDEBUG_MODE: coverage
    steps:
      - name: RUN psalm
        run: (psalm)
